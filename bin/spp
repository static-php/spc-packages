#!/usr/bin/env php
<?php

// Main entrypoint for SPC Packages
// Uses Symfony Console for command-line parsing

// Define constants
define('BASE_PATH', dirname(__DIR__));
const INI_PATH = BASE_PATH . '/src/ini';
const DIST_PATH = BASE_PATH . '/dist';
const DIST_RPM_PATH = DIST_PATH . '/rpm';
const DIST_DEB_PATH = DIST_PATH . '/deb';
define('TEMP_DIR', sys_get_temp_dir() . '/spc-packages');


// Ensure autoloading is set up
require_once BASE_PATH . '/vendor/autoload.php';

use SPC\builder\linux\SystemUtil;
use Symfony\Component\Console\Application;
use staticphp\Command\BuildCommand;
use staticphp\Command\PackageCommand;
use staticphp\Command\AllCommand;

// Create a new Symfony Console Application
$application = new Application('SPC Packages', '1.0.0');

// Register commands
$application->add(new BuildCommand());
$application->add(new PackageCommand());
$application->add(new AllCommand());

// Set default command to list commands when no command is specified
$application->setDefaultCommand('list');

try {
    $exitCode = $application->run();
}
catch (Exception $e) {
    echo "Error running application: " . $e->getMessage() . "\n";
    echo "Stack trace: " . $e->getTraceAsString() . "\n";
}

function setupGithubToken(string $method, string $url, array &$headers): void
{
    $token = getenv('GITHUB_TOKEN');
    if (!$token) {
        logger()->debug('no github token found, skip');
        return;
    }
    if (getenv('GITHUB_USER')) {
        $auth = base64_encode(getenv('GITHUB_USER') . ':' . $token);
        $he = "Authorization: Basic {$auth}";
        if (!in_array($he, $headers)) {
            $headers[] = $he;
        }
        logger()->info("using basic github token for {$method} {$url}");
    }
    else {
        $auth = $token;
        $he = "Authorization: Bearer {$auth}";
        if (!in_array($he, $headers)) {
            $headers[] = $he;
        }
        logger()->info("using bearer github token for {$method} {$url}");
    }
}

function getLibdir(): string
{
    $libdir = in_array(SystemUtil::getOSRelease()['dist'], ['redhat', 'centos']) ? '/usr/lib64' : '/usr/lib';
    return $libdir;
}

function getConfdir(): string
{
    return '/etc/' . \staticphp\step\CreatePackages::getPrefix();
}
