#!/usr/bin/env python3

import os
import re
import glob
import yaml
from datetime import datetime, timezone
from collections import defaultdict

yaml.Dumper.ignore_aliases = lambda *args: True

def detect_platform():
    cwd = os.getcwd()
    for p in ['el7', 'el8', 'el9', 'el10']:
        if p in cwd:
            return p
    return None

def parse_rpm_info(filename):
    basename = os.path.basename(filename)

    # Match standard php-zts RPMs
    match_php = re.match(r'(?P<name>php-zts-[^-]+)-(?P<version>\d+\.\d+\.\d+)-(?P<release>[^.]+)\.(?P<arch>[^.]+)\.rpm', basename)
    if match_php:
        name = match_php.group("name")
        version = match_php.group("version")
        release = match_php.group("release")
        arch = match_php.group("arch")
        stream = '.'.join(version.split('.')[:2])
        return name, version, release, arch, stream

    # Match extension packages
    match_ext = re.match(r'(?P<name>php-zts-[^-]+)-(?P<version>\d+\.\d+\.\d+_\d+)-(?P<release>[^.]+)\.(?P<arch>[^.]+)\.rpm', basename)
    if match_ext:
        name = match_ext.group("name")
        version = match_ext.group("version")
        release = match_ext.group("release")
        arch = match_ext.group("arch")
        php_version = version.split('_')[-1]
        if len(php_version) >= 2:
            major = php_version[0]
            minor = php_version[1]
            stream = f"{major}.{minor}"
        else:
            stream = '.'.join(version.split('_')[0].split('.')[:2])
        return name, version, release, arch, stream

    # Match frankenphp
    match_franken = re.match(r'(frankenphp)-(?P<version>\d+\.\d+\.\d+_\d+)-(?P<release>\d+)\.(?P<arch>[^.]+)\.rpm', basename)
    if match_franken:
        name = match_franken.group(1)
        version = match_franken.group("version")
        release = match_franken.group("release")
        arch = match_franken.group("arch")
        php_patch = version.split('_')[-1]
        stream = f"8.{php_patch[-1]}"
        return name, version, release, arch, stream

    return None

def build_module_structure(rpm_map, platform):
    documents = []
    timestamp = int(datetime.now(timezone.utc).strftime('%Y%m%d'))

    for stream, pkg_list in sorted(rpm_map.items()):
        artifacts = []

        for pkg in sorted(pkg_list):
            info = parse_rpm_info(pkg)
            if not info:
                continue
            name, version, release, arch, _ = info
            artifacts.append(f"{name}-0:{version}-{release}.{arch}")

        doc = {
            'document': 'modulemd',
            'version': 2,
            'data': {
                'name': 'php-zts',
                'stream': f'static-{stream}',
                'version': timestamp,
                'context': 'local',
                'summary': f'PHP {stream} (ZTS) packages',
                'description': f'PHP {stream} (ZTS) built statically - no further dependencies outside this package',
                'license': {
                    'module': ['MIT']
                },
                'dependencies': [{
                    'buildrequires': {
                        'platform': [platform]
                    },
                    'requires': {
                        'platform': [platform]
                    }
                }],
                'artifacts': {
                    'rpms': artifacts
                }
            }
        }
        documents.append(doc)
    return documents

def build_defaults_document(default_stream):
    return {
        'document': 'modulemd-defaults',
        'version': 1,
        'data': {
            'module': 'php-zts',
            'stream': f'static-{default_stream}',
            'profiles': {
                'default': []
            }
        }
    }

# Detect platform
platform = detect_platform() or "el10"

# Collect RPMs
rpm_files = glob.glob("*.rpm")
rpm_map = defaultdict(list)

for rpm in rpm_files:
    info = parse_rpm_info(rpm)
    if info:
        name, _, _, _, stream = info
        if stream:
            rpm_map[stream].append(rpm)

# Build modules.yaml
modules_yaml = build_module_structure(rpm_map, platform)

# Determine highest stream for default
if rpm_map:
    default_stream = sorted(rpm_map.keys())[-1]  # Use highest PHP version
    modules_yaml.append(build_defaults_document(default_stream))

output_path = os.path.join(os.getcwd(), "modules.yaml")
with open(output_path, "w") as f:
    for doc in modules_yaml:
        f.write('---\n')
        yaml.dump(doc, f, sort_keys=False, default_flow_style=False)
        f.write('...\n')

print(output_path)
