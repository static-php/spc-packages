[opcache]
;zend_extension=opcache

; Determines if Zend OPCache is enabled
opcache.enable=1

; Determines if Zend OPCache is enabled for the CLI version of PHP
opcache.enable_cli=1

; The OPcache shared memory storage size.
;opcache.memory_consumption=128

; The amount of memory for interned strings in Mbytes.
;opcache.interned_strings_buffer=8

; The maximum number of keys (scripts) in the OPcache hash table.
; Only numbers between 200 and 1000000 are allowed.
;opcache.max_accelerated_files=10000

; The maximum percentage of "wasted" memory until a restart is scheduled.
;opcache.max_wasted_percentage=5

; When this directive is enabled, the OPcache appends the current working
; directory to the script key, thus eliminating possible collisions between
; files with the same name (basename). Disabling the directive improves
; performance, but may break existing applications.
;opcache.use_cwd=1

; When disabled, you must reset the OPcache manually or restart the
; webserver for changes to the filesystem to take effect.
;opcache.validate_timestamps=1

; How often (in seconds) to check file timestamps for changes to the shared
; memory storage allocation. ("1" means validate once per second, but only
; once per request. "0" means always validate)
;opcache.revalidate_freq=2

; Enables or disables file search in include_path optimization
;opcache.revalidate_path=0

; If disabled, all PHPDoc comments are dropped from the code to reduce the
; size of the optimized code.
;opcache.save_comments=1

; If enabled, compilation warnings (including notices and deprecations) will
; be recorded and replayed each time a file is included. Otherwise, compilation
; warnings will only be emitted when the file is first cached.
;opcache.record_warnings=0

; Allow file existence override (file_exists, etc.) performance feature.
;opcache.enable_file_override=0

; A bitmask, where each bit enables or disables the appropriate OPcache
; passes
;opcache.optimization_level=0x7FFFBFFF

;opcache.dups_fix=0

; The location of the OPcache blacklist file (wildcards allowed).
; Each OPcache blacklist file is a text file that holds the names of files
; that should not be accelerated. The file format is to add each filename
; to a new line. The filename may be a full path or just a file prefix
; (i.e., /var/www/x  blacklists all the files and directories in /var/www
; that start with 'x'). Line starting with a ; are ignored (comments).
;opcache.blacklist_filename=

; Allows exclusion of large files from being cached. By default all files
; are cached.
;opcache.max_file_size=0

; How long to wait (in seconds) for a scheduled restart to begin if the cache
; is not being accessed.
;opcache.force_restart_timeout=180

; OPcache error_log file name. Empty string assumes "stderr".
;opcache.error_log=

; All OPcache errors go to the Web server log.
; By default, only fatal errors (level 0) or errors (level 1) are logged.
; You can also enable warnings (level 2), info messages (level 3) or
; debug messages (level 4).
;opcache.log_verbosity_level=1

; Preferred Shared Memory back-end. Leave empty and let the system decide.
;opcache.preferred_memory_model=

; Protect the shared memory from unexpected writing during script execution.
; Useful for internal debugging only.
;opcache.protect_memory=0

; Allows calling OPcache API functions only from PHP scripts which path is
; started from specified string. The default "" means no restriction
;opcache.restrict_api=

; Mapping base of shared memory segments (for Windows only). All the PHP
; processes have to map shared memory into the same address space. This
; directive allows to manually fix the "Unable to reattach to base address"
; errors.
;opcache.mmap_base=

; Facilitates multiple OPcache instances per user (for Windows only). All PHP
; processes with the same cache ID and user share an OPcache instance.
;opcache.cache_id=

; Enables and sets the second level cache directory.
; It should improve performance when SHM memory is full, at server restart or
; SHM reset. The default "" disables file based caching.
;opcache.file_cache=

; Enables or disables read-only mode for the second level cache directory.
; It should improve performance for read-only containers,
; when the cache is pre-warmed and packaged alongside the application.
; Best used with `opcache.validate_timestamps=0`, `opcache.enable_file_override=1`
; and `opcache.file_cache_consistency_checks=0`.
; Note: A cache generated with a different build of PHP, a different file path,
; or different settings (including which extensions are loaded), may be ignored.
;opcache.file_cache_read_only=0

; Enables or disables opcode caching in shared memory.
;opcache.file_cache_only=0

; Enables or disables checksum validation when script loaded from file cache.
;opcache.file_cache_consistency_checks=1

; Implies opcache.file_cache_only=1 for a certain process that failed to
; reattach to the shared memory (for Windows only). Explicitly enabled file
; cache is required.
;opcache.file_cache_fallback=1

; Enables or disables copying of PHP code (text segment) into HUGE PAGES.
; Under certain circumstances (if only a single global PHP process is
; started from which all others fork), this can increase performance
; by a tiny amount because TLB misses are reduced.  On the other hand, this
; delays PHP startup, increases memory usage and degrades performance
; under memory pressure - use with care.
; Requires appropriate OS configuration.
;opcache.huge_code_pages=0

; Validate cached file permissions.
;opcache.validate_permission=0

; Prevent name collisions in chroot'ed environment.
;opcache.validate_root=0

; If specified, it produces opcode dumps for debugging different stages of
; optimizations.
;opcache.opt_debug_level=0

; Specifies a PHP script that is going to be compiled and executed at server
; start-up.
; https://php.net/opcache.preload
;opcache.preload=

; Preloading code as root is not allowed for security reasons. This directive
; facilitates to let the preloading to be run as another user.
; https://php.net/opcache.preload_user
;opcache.preload_user=

; Prevents caching files that are less than this number of seconds old. It
; protects from caching of incompletely updated files. In case all file updates
; on your site are atomic, you may increase performance by setting it to "0".
;opcache.file_update_protection=2

; Absolute path used to store shared lockfiles (for *nix only).
;opcache.lockfile_path=/tmp

; Enables or disables the JIT compilation. Accepts string values or 4-digit CRTO integer.
; String values:
;   disable  - Completely disabled, cannot be enabled at runtime.
;   off      - Disabled, but can be enabled at runtime.
;   tracing  - Tracing JIT, profiles on the fly and compiles hot code paths (default, recommended).
;   function - Function JIT, compiles whole functions.
; Integer CRTO (C=CPU opt, R=register allocation, T=trigger, O=optimization level).
; Examples: tracing=1254, function=1205.
; Default: disable
; https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.jit
opcache.jit=tracing

; The amount of shared memory (in bytes) reserved for JIT-compiled code.
; Use shorthand notation (e.g. "64M") for convenience.
; "0" disables JIT.
; Default: 64M
; https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.jit-buffer-size
; opcache.jit_buffer_size=64M

; Bitmask specifying which JIT debug output to enable.
; See zend_jit.h macros beginning with ZEND_JIT_DEBUG for values.
; Default: 0
; https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.jit-debug
;opcache.jit_debug=0

; Disables JIT compilation after compiling a certain number of functions.
; Useful for bisecting JIT miscompilations.
; Only works when trigger = 0 or 1 (compile on load or on first execution).
; Default: 0 (no limit)
; https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.jit-bisect-limit
;opcache.jit_bisect_limit=0

; Threshold for function profiling (when using trigger=2).
; Function is considered hot if (calls to func / calls to all funcs) >= threshold.
; Default: 0.005
; https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.jit-prof-threshold
;opcache.jit_prof_threshold=0.005

; Maximum number of root traces. A root trace is the first execution path recorded for JIT.
; Default: 1024
; https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.jit-max-root-traces
;opcache.jit_max_root_traces=1024

; Maximum number of side traces per root trace.
; Side traces are alternative code paths diverging from a root trace.
; Default: 128
; https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.jit-max-side-traces
;opcache.jit_max_side_traces=128

; Maximum number of exit counters across all root traces.
; Limits the total number of side traces that can exist.
; Default: 8192
; https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.jit-max_exit-counters
;opcache.jit_max_exit_counters=8192

; Number of loop iterations before a loop is considered hot and traced.
; Range: [0,255]. Out of range resets to default.
; "0" disables JIT for loops.
; Default: 64
; https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.jit-hot-loop
;opcache.jit_hot_loop=64

; Number of calls before a function is considered hot and compiled.
; Range: [0,255]. Out of range resets to default.
; "0" disables JIT for functions.
; Default: 127
; https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.jit-hot-func
;opcache.jit_hot_func=127

; Number of returns before a return is considered hot.
; Range: [0,255]. Out of range resets to default.
; "0" disables JIT for returns.
; Default: 8
; https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.jit-hot-return
;opcache.jit_hot_return=8

; Number of exits before a side exit is considered hot and compiled.
; Range: [0,255]. Out of range resets to default.
; "0" disables JIT for side exits.
; Default: 8
; https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.jit_hot-side-exit
;opcache.jit_hot_side_exit=8

; Maximum number of times compilation of a root trace may be attempted before blacklisting.
; Default: 16
; https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.jit-blacklist-root-trace
;opcache.jit_blacklist_root_trace=16

; Maximum number of times compilation of a side trace may be attempted before blacklisting.
; Default: 8
; https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.jit-blacklist-side-trace
;opcache.jit_blacklist_side_trace=8

; Maximum number of attempts to unroll a loop in a side trace.
; Default: 8
; https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.jit-max-loop-unrolls
;opcache.jit_max_loop_unrolls=8

; Maximum number of unrolled recursive call loops.
; Default: 2
; https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.jit-max-recursive-calls
;opcache.jit_max_recursive_calls=2

; Maximum number of unrolled recursive return loops.
; Default: 2
; https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.jit-max-recursive_return
;opcache.jit_max_recursive_returns=2

; Maximum number of polymorphic (dynamic/method) calls inlined.
; Calls beyond this limit are treated as megamorphic and not inlined.
; Default: 2
; https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.jit-max-polymorphic-calls
;opcache.jit_max_polymorphic_calls=2
